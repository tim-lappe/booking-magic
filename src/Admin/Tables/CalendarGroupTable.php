<?php


namespace TLBM\Admin\Tables;


use TLBM\Admin\Pages\Contracts\AdminPageManagerInterface;
use TLBM\Admin\Pages\SinglePages\CalendarGroupEditPage;
use TLBM\Admin\Tables\DisplayHelper\DisplayCalendarSelection;
use TLBM\ApiUtils\Contracts\EscapingInterface;
use TLBM\ApiUtils\Contracts\LocalizationInterface;
use TLBM\Entity\CalendarGroup;
use TLBM\MainFactory;
use TLBM\Repository\Query\ManageableEntityQuery;

class CalendarGroupTable extends ManagableEntityTable
{

    /**
     * @var AdminPageManagerInterface
     */
    private AdminPageManagerInterface $adminPageManager;

    /**
     * @var LocalizationInterface
     */
    protected LocalizationInterface $localization;

	/**
	 * @var EscapingInterface
	 */
	protected EscapingInterface $escaping;

	/**
	 * @param EscapingInterface $escaping
	 * @param AdminPageManagerInterface $adminPageManager
	 * @param LocalizationInterface $localization
	 */
    public function __construct(EscapingInterface $escaping, AdminPageManagerInterface $adminPageManager, LocalizationInterface $localization) {
        $this->adminPageManager = $adminPageManager;
        $this->localization = $localization;
		$this->escaping = $escaping;

        parent::__construct(
            CalendarGroup::class, $this->localization->getText("Groups", TLBM_TEXT_DOMAIN), $this->localization->getText("Group", TLBM_TEXT_DOMAIN), 10, $this->localization->getText("You haven't created any groups yet", TLBM_TEXT_DOMAIN)
        );
    }

    protected function getQuery(?string $orderby, ?string $order, ?int $page, bool $useCustomFilters = true): ManageableEntityQuery
    {
        $query = parent::getQuery($orderby, $order, $page); // TODO: Change the autogenerated stub

        if ($orderby == "title") {
            $query->setOrderBy([[TLBM_ENTITY_QUERY_ALIAS . ".title", $order]]);
        } elseif ($orderby == "booking_distribution") {
            $query->setOrderBy([[TLBM_ENTITY_QUERY_ALIAS . ".bookingDisitribution", $order]]);
        }

        return $query;
    }


    /**
     * @return array
     */
    protected function getColumns(): array
    {
        $columns = parent::getColumns();

        array_splice($columns, 1, 0, [new Column("title", $this->localization->getText("Title", TLBM_TEXT_DOMAIN), true, function ($item) {
            $groupEditPage = $this->adminPageManager->getPage(CalendarGroupEditPage::class);
            $link          = $groupEditPage->getEditLink($item->getId());

            if ( !empty($item->getTitle())) {
                echo "<strong><a href='" . $this->escaping->escUrl($link) . "'>" . $this->escaping->escHtml($item->getTitle()) . "</a></strong>";
            } else {
                echo "<strong><a href='" . $this->escaping->escUrl($link) . "'>" . $this->escaping->escHtml($item->getId()) . "</a></strong>";
            }
        }),
            new Column("selected_calendars", $this->localization->getText('Selected Calendars', TLBM_TEXT_DOMAIN), false, function ($item) {
                $selection        = $item->getCalendarSelection();
                $selectionDisplay = MainFactory::create(DisplayCalendarSelection::class);
                $selectionDisplay->setCalendarSelection($selection);
                $selectionDisplay->display();
            }),
            new Column("booking_distribution", $this->localization->getText('Booking Distribution', TLBM_TEXT_DOMAIN), true, function ($item) {
                if ($item->getBookingDisitribution() == TLBM_BOOKING_DISTRIBUTION_EVENLY) {
					$this->localization->echoText("Evenly", TLBM_TEXT_DOMAIN);
                } elseif ($item->getBookingDisitribution() == TLBM_BOOKING_DISTRIBUTION_FILL_ONE) {
					$this->localization->echoText("Fill One First", TLBM_TEXT_DOMAIN);
                }
            })
        ]);

        return $columns;
    }

    /**
     * @param string $which
     *
     * @return void
     */
    protected function tableNav(string $which): void
    {

    }
}