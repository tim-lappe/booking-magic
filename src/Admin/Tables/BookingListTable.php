<?php


namespace TLBM\Admin\Tables;

use TLBM\Admin\Pages\Contracts\AdminPageManagerInterface;
use TLBM\Admin\Pages\SinglePages\BookingEditPage;
use TLBM\Admin\Pages\SinglePages\CalendarEditPage;
use TLBM\Admin\Settings\Contracts\SettingsManagerInterface;
use TLBM\Admin\Settings\SingleSettings\BookingProcess\BookingStates;
use TLBM\Booking\Semantic\BookingValueSemantic;
use TLBM\Entity\Booking;
use TLBM\MainFactory;
use TLBM\Repository\Query\ManageableEntityQuery;
use TLBM\Utilities\Colors;
use TLBM\Utilities\Contracts\ColorsInterface;
use TLBM\Utilities\ExtendedDateTime;

class BookingListTable extends ManagableEntityTable
{

    /**
     * @var AdminPageManagerInterface
     */
    private AdminPageManagerInterface $adminPageManager;

    /**
     * @var SettingsManagerInterface
     */
    private SettingsManagerInterface $settingsManager;

    /**
     * @var ColorsInterface
     */
    private ColorsInterface $colors;

    public function __construct(AdminPageManagerInterface $adminPageManager, SettingsManagerInterface $settingsManager) {
        $this->adminPageManager = $adminPageManager;
        $this->settingsManager = $settingsManager;
        $this->colors          = new Colors();

        parent::__construct(
            Booking::class, __("Bookings", TLBM_TEXT_DOMAIN), __("Booking", TLBM_TEXT_DOMAIN), 10, __("You don't have any bookings yet", TLBM_TEXT_DOMAIN)
        );
    }


    protected function getQuery(?string $orderby, ?string $order, ?int $page): ManageableEntityQuery
    {
        $query = parent::getQuery($orderby, $order, $page); // TODO: Change the autogenerated stub

        if ($orderby == "id") {
            $query->setOrderBy([[TLBM_ENTITY_QUERY_ALIAS . ".id", $order]]);

        } elseif($orderby == "state") {
            $query->setOrderBy([[TLBM_ENTITY_QUERY_ALIAS . ".state", $order]]);
        }

        $query->addWhere(TLBM_ENTITY_QUERY_ALIAS . ".internalState = '" . TLBM_BOOKING_INTERNAL_STATE_COMPLETED . "'");

        return $query;
    }

    protected function getColumns(): array
    {
        $columns = parent::getColumns();

        array_splice($columns, 1, 0, [
            new Column("id", __("ID", TLBM_TEXT_DOMAIN), true, array($this, "columnDisplayId")),
            new Column("values", __("Form values", TLBM_TEXT_DOMAIN), false, function (Booking $booking) {
                $semantic = MainFactory::create(BookingValueSemantic::class);
                $semantic->setValuesFromBooking($booking);

                $content = $semantic->getFullName() . "<br>";
                $content .= $semantic->getFullAddress();

                echo $content;
            }),
            new Column("calendar", __("Calendar", TLBM_TEXT_DOMAIN), false, array($this, "columnDisplayCalendar")),
            new Column("state", __("State", TLBM_TEXT_DOMAIN), true, array($this, "columnDisplayState")),
        ]);

        return $columns;
    }

    /**
     * @param Booking $item
     *
     * @return void
     */
    protected function columnDisplayId(Booking $item) {
        $editPage = $this->adminPageManager->getPage(BookingEditPage::class);
        if ($editPage) {
            $link = $editPage->getEditLink($item->getId());
            echo "<strong><a href ='" . $link . "'># " . $item->getId() . "</a></strong>";
        }
    }

    /**
     * @param Booking $item
     *
     * @return void
     */
    protected function columnDisplayCalendar(Booking $item) {
        $calslots = $item->getCalendarBookings();
        $calendarEditPage = $this->adminPageManager->getPage(CalendarEditPage::class);
        if($calendarEditPage) {
            foreach ($calslots as $calendarBooking) {
                $calendar = $calendarBooking->getCalendar();
                $prefix   = "";
                if (sizeof($calslots) > 1) {
                    $prefix = $calendarBooking->getTitleFromForm() . "&nbsp;&nbsp;&nbsp;";
                }

                if($calendar != null) {
                    $link     = $calendarEditPage->getEditLink($calendar->getId());
                    //TODO: Es wird derzeit nur "From" in der Tabelle angezeigt.

                    echo $prefix . "<a href='" . $link . "'>" . $calendar->getTitle() . "</a>&nbsp;&nbsp;&nbsp;" . $calendarBooking->getFromDateTime() . "<br>";
                } else {
                    echo $prefix . "<strong>" . __("Calendar deleted", TLBM_TEXT_DOMAIN) . "</strong>&nbsp;&nbsp;&nbsp;" .  $calendarBooking->getFromDateTime() . "<br>";
                }
            }

            if (sizeof($calslots) == 0) {
                echo "-";
            }
        }
    }

    protected function columnDisplayState(Booking $item)
    {
        $bookingStatesSetting = $this->settingsManager->getSetting(BookingStates::class);
        $state = $bookingStatesSetting->getStateByName($item->getState());
        $rgb   = $this->colors->getRgbFromHex($state['color']); ?>

         <div class='tlbm-table-list-state' style="background-color: rgba(<?php echo $rgb[0] . "," . $rgb[1] . "," . $rgb[2] ?>, 0.4)">
             <span><?php echo $state['title'] ?></span>
         </div>
        <?php
    }

    protected function columnDisplayDate(Booking $item) {
        echo new ExtendedDateTime($item->getTimestampCreated());
    }
}