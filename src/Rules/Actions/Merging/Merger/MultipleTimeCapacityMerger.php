<?php

namespace TLBM\Rules\Actions\Merging\Merger;

use TLBM\MainFactory;
use TLBM\Rules\Actions\ActionData\MultipleTimeSlotData;
use TLBM\Rules\Actions\Merging\CapacityMergeHelper;
use TLBM\Rules\Actions\Merging\Contracts\MergeResultInterface;
use TLBM\Rules\Actions\Merging\LastTimeCapacitiyModificationHelper;
use TLBM\Rules\Actions\Merging\Results\TimeCapacitiesCollectionResults;
use TLBM\Rules\Actions\Merging\Results\TimedCapacityResult;

class MultipleTimeCapacityMerger extends Merger
{

    public function merge(?MergeResultInterface $mergeResult = null): ?MergeResultInterface
    {
        if ($mergeResult == null) {
            $mergeResult = MainFactory::create(TimeCapacitiesCollectionResults::class);
        }

        if ($mergeResult instanceof TimeCapacitiesCollectionResults) {
            $fromHour   = $this->getActionData()->getTimeHourFrom();
            $fromMinute = $this->getActionData()->getTimeMinuteFrom();
            $toHour     = $this->getActionData()->getTimeHourTo();
            $toMinute   = $this->getActionData()->getTimeMinuteTo();
            $interval   = $this->getActionData()->getIntervalMinutes();

            for ($totalMinute = $fromMinute + $fromHour * 60; $totalMinute <= $toMinute + $toHour * 60; $totalMinute += $interval) {
                $hour   = floor($totalMinute / 60.0);
                $minute = $totalMinute % 60;

                $timedCap = $mergeResult->getTimeCapacityAt($hour, $minute);
                if ($timedCap == null) {
                    $timedCapResult = new TimedCapacityResult();
                    $timedCapResult->setHour($hour);
                    $timedCapResult->setMinute($minute);
                    $timedCap = $timedCapResult;
                    $mergeResult->addTimeCapacity($timedCap);
                }

                $capacityMergeHelper = new CapacityMergeHelper($timedCap);
                $capacityMergeHelper->mergeWithAction($this->getActionData());
            }

            if ($this->getNextMerging()) {
                return $this->getNextMerging()->merge($mergeResult);
            }

            return $mergeResult;
        }

        return MainFactory::create(TimeCapacitiesCollectionResults::class);
    }

    /**
     * @return MultipleTimeSlotData|null
     */
    protected function getActionData(): ?MultipleTimeSlotData
    {
        $actionData = parent::getActionData();
        if ($actionData instanceof MultipleTimeSlotData) {
            return $actionData;
        }

        return null;
    }

    /**
     * @param string $term
     * @param array $calendarIds
     * @param MergeResultInterface $mergeResult
     *
     * @return MergeResultInterface
     */
    public function lastStepModification(string $term, array $calendarIds, MergeResultInterface $mergeResult): MergeResultInterface
    {
        if ($mergeResult instanceof TimeCapacitiesCollectionResults) {
            $helper = MainFactory::create(LastTimeCapacitiyModificationHelper::class);
            $helper->setMergeResult($mergeResult);
            $helper->setCalendarIds($calendarIds);
            $helper->setDateTimeContext($this->getDateTimeContext());

            return $helper->modify();
        }

        return parent::lastStepModification($term, $calendarIds, $mergeResult); // TODO: Change the autogenerated stub
    }
}